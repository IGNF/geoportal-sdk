'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Layer = require('../Scene/Layer');

var _Layer2 = _interopRequireDefault(_Layer);

var _Quadtree = require('../Scene/Quadtree');

var _Quadtree2 = _interopRequireDefault(_Quadtree);

var _SchemeTile = require('../Scene/SchemeTile');

var _SchemeTile2 = _interopRequireDefault(_SchemeTile);

var _MathExtended = require('../Core/Math/MathExtended');

var _MathExtended2 = _interopRequireDefault(_MathExtended);

var _TileMesh = require('./TileMesh');

var _TileMesh2 = _interopRequireDefault(_TileMesh);

var _Atmosphere = require('./Atmosphere');

var _Atmosphere2 = _interopRequireDefault(_Atmosphere);

var _Clouds = require('./Clouds');

var _Clouds2 = _interopRequireDefault(_Clouds);

var _Capabilities = require('../Core/System/Capabilities');

var _Capabilities2 = _interopRequireDefault(_Capabilities);

var _Coordinates = require('../Core/Geographic/Coordinates');

var _LayersConfiguration = require('../Scene/LayersConfiguration');

var _LayersConfiguration2 = _interopRequireDefault(_LayersConfiguration);

var _NodeProcess = require('../Scene/NodeProcess');

var _BoundingBox = require('../Scene/BoundingBox');

var _BoundingBox2 = _interopRequireDefault(_BoundingBox);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */
// bbox longitude(0,360),latitude(-90,90)
var schemeTile_0 = 0;
// bbox longitude(-180,180),latitude(-90,90)
/**
 * Generated On: 2015-10-5
 * Class: Globe
 * Description: Le globe est le noeud du globe (node) principale.
 */

var schemeTile_1 = 1;
/* eslint-enable */

function Globe(ellipsoid, gLDebug) {
    // Constructor

    _Layer2.default.call(this);

    var caps = new _Capabilities2.default();
    this.NOIE = !caps.isInternetExplorer();
    this.gLDebug = gLDebug;

    this.gpxTracks = new _Layer2.default();
    var gpx = new THREE.Object3D();
    this.gpxTracks.add(gpx);
    this.gpxTracks.visible = true;
    gpx.visible = true;

    this.tiles = new _Quadtree2.default(_TileMesh2.default, this.SchemeTileWMTS(schemeTile_1), null);
    this.layersConfiguration = new _LayersConfiguration2.default();

    this.atmosphere = this.NOIE ? new _Atmosphere2.default(ellipsoid) : undefined;
    this.clouds = new _Clouds2.default();

    var zUp = new THREE.Object3D();
    zUp.quaternion.multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2));
    zUp.quaternion.multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), Math.PI));
    this.layerWGS84Zup = new _Layer2.default();
    this.layerWGS84Zup.add(zUp);

    this.add(this.tiles);
    this.add(this.gpxTracks);
    // this.add(this.layerWGS84Zup);

    if (this.atmosphere !== undefined && !this.gLDebug) {
        this.atmosphere.add(this.clouds);
        this.add(this.atmosphere);
    }
}

Globe.prototype = (0, _create2.default)(_Layer2.default.prototype);

Globe.prototype.constructor = Globe;

/**
 * @documentation: Rafrachi les materiaux en fonction du quadTree ORTHO
 *
 */
Globe.prototype.QuadTreeToMaterial = function QuadTreeToMaterial() {
    // TODO: Implement Me

};

Globe.prototype.SchemeTileWMTS = function SchemeTileWMTS(type) {
    var schemeT = new _SchemeTile2.default();

    if (type === 0) {
        // bbox longitude(0,360),latitude(-90,90)
        schemeT.add(new _BoundingBox2.default('EPSG:4326', 0, _MathExtended2.default.PI, -_MathExtended2.default.PI_OV_TWO, _MathExtended2.default.PI_OV_TWO));
        schemeT.add(new _BoundingBox2.default('EPSG:4326', _MathExtended2.default.PI, _MathExtended2.default.TWO_PI, -_MathExtended2.default.PI_OV_TWO, _MathExtended2.default.PI_OV_TWO));
    } else if (type == 1) {
        // bbox longitude(-180,180),latitude(-90,90)
        schemeT.add(new _BoundingBox2.default('EPSG:4326', -_MathExtended2.default.PI, 0, -_MathExtended2.default.PI_OV_TWO, _MathExtended2.default.PI_OV_TWO));
        schemeT.add(new _BoundingBox2.default('EPSG:4326', 0, _MathExtended2.default.PI, -_MathExtended2.default.PI_OV_TWO, _MathExtended2.default.PI_OV_TWO));
    }
    // store internally as Radians to avoid doing too much deg->rad conversions
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)(schemeT.schemeBB), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var bbox = _step.value;

            bbox.minCoordinate._internalStorageUnit = _Coordinates.UNIT.RADIAN;
            bbox.maxCoordinate._internalStorageUnit = _Coordinates.UNIT.RADIAN;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return schemeT;
};

Globe.prototype.showAtmosphere = function showAtmosphere(show) {
    if (this.atmosphere !== undefined) {
        this.atmosphere.visible = show;
    }
};

Globe.prototype.showClouds = function showClouds(show, satelliteAnimation) {
    if ( /* this.clouds.live === false && */show) {
        this.clouds.generate(satelliteAnimation);
    }
    this.clouds.visible = show;
};

Globe.prototype.updateLightingPos = function updateLightingPos(pos) {
    this.atmosphere.updateLightingPos(pos);
    this.clouds.updateLightingPos(pos);
};

Globe.prototype.setLayerOpacity = function setLayerOpacity(id, opacity) {
    this.layersConfiguration.setLayerOpacity(id, opacity);

    var cO = function cO(object) {
        if (object.material.setLayerOpacity) {
            object.material.setLayerOpacity(object.getIndexLayerColor(id), opacity);
        }
    };

    // children[0] is rootNode
    this.tiles.children[0].traverse(cO);
};

Globe.prototype.setLayerVisibility = function setLayerVisibility(id, visible) {
    this.layersConfiguration.setLayerVisibility(id, visible);

    var featureLayer = this.layersConfiguration.getGeometryLayerById(id);
    if (featureLayer != undefined) {
        featureLayer.root.layer.visible = visible;
        featureLayer.root.visible = visible;
    } else {
        var cO = function cO(object) {
            if (object.material.setLayerVisibility) {
                object.material.setLayerVisibility(object.getIndexLayerColor(id), visible);
            }
        };

        // children[0] is rootNode
        this.tiles.children[0].traverse(cO);
    }
};

// TEMP
Globe.prototype.setFeatureLayerVisibility = function setFeatureLayerVisibility(id, visible) {
    this.layersConfiguration.setLayerVisibility(id, visible);

    var cO = function cO(object) {
        if (object.material.setFeatureLayerVisibility) {
            object.material.setFeatureLayerVisibility(visible);
        }
    };
    // children[0] is rootNode
    this.tiles.children[0].traverse(cO);
};

Globe.prototype.updateLayersOrdering = function updateLayersOrdering() {
    var sequence = this.layersConfiguration.getColorLayersIdOrderedBySequence();

    var cO = function cO(object) {
        if (object.changeSequenceLayers) {
            object.changeSequenceLayers(sequence);
        }
    };

    this.tiles.children[0].traverse(cO);
};

Globe.prototype.removeColorLayer = function removeColorLayer(layer) {
    var cO = function cO(object) {
        if (object.removeColorLayer) {
            object.removeColorLayer(layer);
        }
    };

    this.tiles.children[0].traverse(cO);
};

Globe.prototype.getZoomLevel = function getZoomLevel() {
    var cO = function getCOFn() {
        var zoom = 0;
        return function cO(object) {
            if (object) {
                zoom = Math.max(zoom, object.level);
            }
            return zoom;
        };
    }();

    this.tiles.children[0].traverseVisible(cO);
    return cO();
};

Globe.prototype.computeDistanceForZoomLevel = function computeDistanceForZoomLevel(zoom, camera) {
    return camera.preSSE * Math.pow(this.tiles.minLevel, this.tiles.maxLevel - zoom + 1) / _NodeProcess.SSE_SUBDIVISION_THRESHOLD;
};

Globe.prototype.getTile = function getTile(coordinate) {
    return this.tiles.getTile(coordinate);
};

Globe.prototype.setRealisticLightingOn = function setRealisticLightingOn(bool) {
    this.atmosphere.setRealisticOn(bool);
    this.clouds.setLightingOn(bool);
};

exports.default = Globe;