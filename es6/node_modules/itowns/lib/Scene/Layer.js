'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Node = require('./Node');

var _Node2 = _interopRequireDefault(_Node);

var _Projection = require('../Core/Geographic/Projection');

var _Projection2 = _interopRequireDefault(_Projection);

var _NodeMesh = require('../Renderer/NodeMesh');

var _NodeMesh2 = _interopRequireDefault(_NodeMesh);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generated On: 2015-10-5
 * Class: Layer
 * Description: Le layer est une couche de données. Cette couche peut etre des images ou de l'information 3D. Les requètes de cette couche sont acheminées par une interfaceCommander.
 *
 */

/**
 *
 * @param {type} Node
 * @param {type} InterfaceCommander
 * @param {type} Projection
 * @param {type} NodeMesh
 * @returns {Layer_L15.Layer}
 */
function Layer() {
    // Constructor

    _Node2.default.call(this);
    this.descriManager = null;
    this.projection = new _Projection2.default();
    this.id = Layer.count++;
}

Layer.count = 0;

Layer.prototype = (0, _create2.default)(_Node2.default.prototype);

Layer.prototype.constructor = Layer;

// Should be plural as it return an array of meshes
Layer.prototype.getMesh = function getMesh() {
    var meshs = [];

    for (var i = 0; i < this.children.length; i++) {
        var node = this.children[i];

        if (node instanceof _NodeMesh2.default || node instanceof THREE.Mesh || node instanceof THREE.Object3D) {
            meshs.push(node);
        } else if (node instanceof Layer) {
            meshs = meshs.concat(node.getMesh());
        }
    }

    return meshs;
};

exports.default = Layer;