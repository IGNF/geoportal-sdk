'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _AnimationPlayer = require('../../Core/AnimationPlayer');

var _AnimationPlayer2 = _interopRequireDefault(_AnimationPlayer);

var _GlobeControls = require('./GlobeControls');

var _GlobeControls2 = _interopRequireDefault(_GlobeControls);

var _ImmersiveControls = require('./ImmersiveControls');

var _ImmersiveControls2 = _interopRequireDefault(_ImmersiveControls);

var _Coordinates = require('../../Core/Geographic/Coordinates');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Expression used to damp camera's moves
function moveCameraExp(root, progress) {
    root.camera.position.lerpVectors(root.positionFrom, root.positionTo, progress);
}

// import Coordinates, { ellipsoidSizes } from '../../Core/Geographic/Coordinates';


var size = (0, _Coordinates.ellipsoidSizes)().x;

function onKeyDown(e) {
    // eslint-disable-next-line no-console
    console.log('ControlsSwitcher get key down event : ', e.keyCode);

    // key Space
    if (e.keyCode == 32) {
        // eslint-disable-next-line no-console
        console.log('NEED TO SWITCH CONTROLS NOW !!');
        if (this.state == this.STATES.IMMERSIVE) {
            this.controls.dispose();
            // const coordCarto = new Coordinates('EPSG:4978', this.camera.position.x, this.camera.position.y, this.camera.position.z).as('EPSG:4326');
            // coordCarto.setAltitude(5000);
            if (!this.globeControls) {
                this.globeControls = new _GlobeControls2.default(this.view, this.camera.position.clone(), size, { handleCollision: false });
                this.globeControls.minDistance = 0;
            } else {
                this.globeControls.enabled = true;
                this.globeControls.enableKeys = true;
                this.globeControls.resetControls();

                // TODO UPDATE CAMERA
                // this.globeControls.camera.position.set(this.controls.camera.position.clone());
            }
            this.state = this.STATES.GLOBE;
        } else if (this.state == this.STATES.GLOBE) {
            this.globeControls.enabled = false;
            this.globeControls.enableKeys = false;
            this.globeControls.resetControls();
            this.globeControls.state = this.globeControls.states.NONE;

            this.controls = new _ImmersiveControls2.default(this.view);
            this.state = this.STATES.IMMERSIVE;

            // eslint-disable-next-line
            for (var i in this.layers) {
                this.controls.addLayer(this.layers[i]);
            }
            this.controls.setCameraToCurrentPano();
        }
    }
}
function update2() {
    this.view.notifyChange(true, this.view);
}

var ControlsSwitcher = function (_THREE$EventDispatche) {
    (0, _inherits3.default)(ControlsSwitcher, _THREE$EventDispatche);

    function ControlsSwitcher(view) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        (0, _classCallCheck3.default)(this, ControlsSwitcher);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ControlsSwitcher.__proto__ || (0, _getPrototypeOf2.default)(ControlsSwitcher)).call(this));

        _this.STATES = {
            IMMERSIVE: 0,
            GLOBE: 1
        };

        _this.state = _this.STATES.IMMERSIVE;

        _this.camera = view.camera.camera3D;
        _this.view = view;
        _this.options = options;

        // this.globeControls = new GlobeControls(this.view);
        // this.globeControls.dispose();

        _this.controls = new _ImmersiveControls2.default(_this.view);
        _this.layers = [];

        _this.player = new _AnimationPlayer2.default();
        _this.animationMoveCamera = new _AnimationPlayer.AnimatedExpression({ duration: 5, root: _this, expression: moveCameraExp, name: 'Move camera' });

        var domElement = view.mainLoop.gfxEngine.renderer.domElement;
        domElement.addEventListener('keydown', onKeyDown.bind(_this), true);
        _this.player.addEventListener('animation-frame', update2.bind(_this));
        return _this;
    }

    (0, _createClass3.default)(ControlsSwitcher, [{
        key: 'switchMode',
        value: function switchMode() {
            if (this.state == this.STATES.IMMERSIVE) {
                this.controls.dispose();
                // const coordCarto = new Coordinates('EPSG:4978', this.camera.position.x, this.camera.position.y, this.camera.position.z).as('EPSG:4326');
                // coordCarto.setAltitude(5000);
                if (!this.globeControls) {
                    this.globeControls = new _GlobeControls2.default(this.view, this.camera.position.clone(), size, { handleCollision: false });
                    this.globeControls.minDistance = 0;
                } else {
                    this.globeControls.enabled = true;
                    this.globeControls.enableKeys = true;
                    this.globeControls.resetControls();

                    // TODO UPDATE CAMERA
                    // this.globeControls.camera.position.set(this.controls.camera.position.clone());
                }
                this.state = this.STATES.GLOBE;
            } else if (this.state == this.STATES.GLOBE) {
                this.globeControls.enabled = false;
                this.globeControls.enableKeys = false;
                this.globeControls.resetControls();
                this.globeControls.state = this.globeControls.states.NONE;

                this.controls = new _ImmersiveControls2.default(this.view);
                this.state = this.STATES.IMMERSIVE;

                // eslint-disable-next-line
                for (var i in this.layers) {
                    this.controls.addLayer(this.layers[i]);
                }
                this.controls.setCameraToCurrentPano();
            }
        }
    }, {
        key: 'moveCameraTo',
        value: function moveCameraTo(positionTo) {
            this.positionFrom = this.camera.position.clone();
            this.positionTo = positionTo;
            this.player.play(this.animationMoveCamera);
        }
    }, {
        key: 'addLayer',
        value: function addLayer(layer) {
            if (this.controls instanceof _ImmersiveControls2.default) {
                this.controls.addLayer(layer);
                this.layers.push(layer);
            } else {
                // eslint-disable-next-line no-console
                console.log('ControlSwitcher: addLayer called out of ImmersiveControls');
            }
        }
    }, {
        key: 'nextLayer',
        value: function nextLayer() {
            if (this.controls instanceof _ImmersiveControls2.default) {
                this.controls.nextLayer();
            } else {
                // eslint-disable-next-line no-console
                console.log('ControlSwitcher: NextLayer called out of ImmersiveControls');
            }
        }
    }, {
        key: 'setCameraToCurrentPano',
        value: function setCameraToCurrentPano() {
            if (this.controls instanceof _ImmersiveControls2.default) {
                this.controls.setCameraToCurrentPano();
            } else {
                // eslint-disable-next-line no-console
                console.log('ControlSwitcher: setCameraToCurrentPano called out of ImmersiveControls');
            }
        }
    }]);
    return ControlsSwitcher;
}(THREE.EventDispatcher);

exports.default = ControlsSwitcher;