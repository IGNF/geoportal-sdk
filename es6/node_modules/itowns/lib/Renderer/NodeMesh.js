'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Node = require('../Scene/Node');

var _Node2 = _interopRequireDefault(_Node);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generated On: 2015-10-5
 * Class: NodeMesh
 * Description: Node + THREE.Mesh. Combine les paramètres d'un Node. NodeMesh peut etre ajouté à la THREE.Scene.
 */

var NodeMesh = function NodeMesh() {
    // Constructor

    _Node2.default.call(this);
    THREE.Mesh.call(this);

    this.sse = 0.0;
    this.pendingSubdivision = false;
    // content is Map where keys are layer.id
    this.content = new _map2.default();
    this.helper = undefined;
};

NodeMesh.prototype = (0, _create2.default)(THREE.Mesh.prototype);

NodeMesh.prototype.constructor = NodeMesh;

NodeMesh.prototype.enableRTC = function enableRTC() {};

NodeMesh.prototype.showHelper = function showHelper(show) {
    if (this.helper !== undefined) {
        this.helper.visible = show;
    }
};

NodeMesh.prototype.isVisible = function isVisible() {
    return this.visible;
};

NodeMesh.prototype.setVisibility = function setVisibility(show) {
    this.visible = show;
    this.showHelper(show);
    this.content.forEach(function (element) {
        element.visible = show;
    });
};

NodeMesh.prototype.setDisplayed = function setDisplayed(show) {
    this.material.visible = show;
    if (this.helper !== undefined) {
        this.helper.setMaterialVisibility(show);
    }

    if (show) {
        this.content.forEach(function (element) {
            element.visible = true;
        });
    }
};

NodeMesh.prototype.isDisplayed = function isDisplayed() {
    return this.material.visible;
};

_Node2.default.extend(NodeMesh);

exports.default = NodeMesh;