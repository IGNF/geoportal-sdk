'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _three = require('three');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(blocks, w, h) {
    var root = { x: 0, y: 0, w: w, h: h };
    var maxX = 0;
    var maxY = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)(blocks), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var block = _step.value;

            var node = _findNode(root, block.w, block.h);
            if (node) {
                block.fit = _splitNode(node, block.w, block.h);
                maxX = Math.max(node.x + block.w);
                maxY = Math.max(node.y + block.h);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    if (!_three.Math.isPowerOfTwo(maxX)) {
        maxX = _three.Math.nextPowerOfTwo(maxX);
    }
    if (!_three.Math.isPowerOfTwo(maxY)) {
        maxY = _three.Math.nextPowerOfTwo(maxY);
    }
    return { maxX: maxX, maxY: maxY };
} // original code from https://github.com/jakesgordon/bin-packing
// MIT License

function _findNode(root, w, h) {
    if (root.used) {
        return _findNode(root.right, w, h) || _findNode(root.down, w, h);
    } else if (w <= root.w && h <= root.h) {
        return root;
    } else {
        return null;
    }
}

function _splitNode(node, w, h) {
    node.used = true;
    node.down = { x: node.x, y: node.y + h, w: node.w, h: node.h - h };
    node.right = { x: node.x + w, y: node.y, w: node.w - w, h: h };
    return node;
}

exports.default = fit;