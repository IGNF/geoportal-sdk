'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _IoDriver = require('./IoDriver');

var _IoDriver2 = _interopRequireDefault(_IoDriver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var portableXBIL = function portableXBIL(buffer) {
    this.floatArray = new Float32Array(buffer);
    this.max = undefined;
    this.min = undefined;
    this.texture = null;
}; /**
    * Generated On: 2015-10-5
    * Class: IoDriver_XBIL
    */
/* global Float32Array*/

function IoDriver_XBIL() {
    // Constructor
    _IoDriver2.default.call(this);
}

IoDriver_XBIL.prototype = (0, _create2.default)(_IoDriver2.default.prototype);

IoDriver_XBIL.prototype.constructor = IoDriver_XBIL;

IoDriver_XBIL.prototype.computeMinMaxElevation = function computeMinMaxElevation(buffer, width, height, offsetScale) {
    var min = 1000000;
    var max = -1000000;

    var sizeX = offsetScale ? Math.floor(offsetScale.z * width) : buffer.length;
    var sizeY = offsetScale ? Math.floor(offsetScale.z * height) : 1;
    var xs = offsetScale ? Math.floor(offsetScale.x * width) : 0;
    var ys = offsetScale ? Math.floor(offsetScale.y * height) : 0;

    var inc = offsetScale ? Math.max(Math.floor(sizeX / 8), 2) : 16;

    for (var y = ys; y < ys + sizeY; y += inc) {
        var pit = y * (width || 0);
        for (var x = xs; x < xs + sizeX; x += inc) {
            var val = buffer[pit + x];
            if (val > -10.0 && val !== undefined) {
                max = Math.max(max, val);
                min = Math.min(min, val);
            }
        }
    }

    if (max === -1000000 || min === 1000000) {
        return { min: undefined, max: undefined };
    }
    return { min: min, max: max };
};

IoDriver_XBIL.prototype.parseXBil = function parseXBil(buffer, url) {
    if (!buffer) {
        throw new Error('Error processing XBIL');
    }

    var result = new portableXBIL(buffer);

    var elevation = this.computeMinMaxElevation(result.floatArray);

    result.min = elevation.min;
    result.max = elevation.max;

    result.url = url;

    return result;
};

IoDriver_XBIL.prototype.read = function read(url) {
    var _this = this;

    return fetch(url).then(function (response) {
        if (response.status < 200 || response.status >= 300) {
            throw new Error('Error loading ' + url + ': status ' + response.status);
        }
        return response.arrayBuffer();
    }).then(function (buffer) {
        return _this.parseXBil(buffer, url);
    });
};

exports.default = IoDriver_XBIL;