'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Layer = require('../Scene/Layer');

var _Layer2 = _interopRequireDefault(_Layer);

var _c3DEngine = require('../Renderer/c3DEngine');

var _c3DEngine2 = _interopRequireDefault(_c3DEngine);

var _Projection = require('../Core/Geographic/Projection');

var _Projection2 = _interopRequireDefault(_Projection);

var _PanoramicProvider = require('../Core/Commander/Providers/PanoramicProvider');

var _PanoramicProvider2 = _interopRequireDefault(_PanoramicProvider);

var _Coordinates = require('../Core/Geographic/Coordinates');

var _Coordinates2 = _interopRequireDefault(_Coordinates);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Layer for MobileMapping data. Up to now it is used for panoramic imagery
 * It uses a Panoramic Provider
 * @returns {MobileMappingLayer_L18.MobileMappingLayer}
 */
/**
 * Generated On: 2016-10-5
 * Class: MobileMappingLayer
 * Description: Layer for mobileMappingData
 */

function MobileMappingLayer() {
    var _this = this;

    // Constructor

    _Layer2.default.call(this);

    this.panoramicMesh = null;
    this.name = 'MobileMappingLayer';
    this.mainMesh = new THREE.Object3D();
    this.add(this.mainMesh);

    this.panoramicProvider = null;

    this.domElement = document;
    // this.domElement.addEventListener('mousedown', onMouseDown, false).bind(this);
    window.addEventListener('mousedown', function (event) {
        if (event.button === 2) {
            _this.updateData();
        }
    }, false);
}

MobileMappingLayer.prototype = (0, _create2.default)(_Layer2.default.prototype);
MobileMappingLayer.prototype.constructor = MobileMappingLayer;

MobileMappingLayer.prototype.initiatePanoramic = function initiatePanoramic(imageOpt) {
    var _this2 = this;

    var imagesOptions = imageOpt || this.getDefaultOptions();
    // console.log(this.defaultOptions);
    // Create and add the MobileMappingLayer with Panoramic imagery
    this.panoramicProvider = new _PanoramicProvider2.default(imagesOptions);

    this.panoramicProvider.getTextureProjectiveMesh(2.3348138, 48.8506030, 1000).then(function (projMesh) {
        _this2.panoramicMesh = projMesh;
        _this2.mainMesh.add(_this2.panoramicMesh);
        (0, _c3DEngine2.default)().renderScene();

        // Move camera to panoramic center
        var panoInfo = _this2.panoramicProvider.panoInfo;
        var posPanoWGS84 = new _Coordinates2.default('EPSG:4326', panoInfo.longitude, panoInfo.latitude, panoInfo.altitude);
        var posPanoCartesian = posPanoWGS84.as('EPSG:4978').xyz();

        _this2.moveCameraToScanPosition(posPanoCartesian);
    });
};

MobileMappingLayer.prototype.updateData = function updateData() {
    var _this3 = this;

    var pos = (0, _c3DEngine2.default)().controls.getPickingPosition();
    var posWGS84 = new _Projection2.default().cartesianToGeo(pos);
    var lonDeg = posWGS84.longitude / Math.PI * 180;
    var latDeg = posWGS84.latitude / Math.PI * 180;

    // console.log("position clicked: ",pos, "wgs, longitude:", posWGS84.longitude/ Math.PI * 180, "   '",posWGS84.latitude/ Math.PI * 180, "  alti:", posWGS84.altitude);

    this.panoramicProvider.updateMaterialImages(lonDeg, latDeg, 1000).then(function (panoInfo) {
        // Move camera to new pos
        //   var panoInfo = panoInfo; //this.panoramicProvider.panoInfo;
        var posPanoWGS84 = new _Coordinates2.default('EPSG:4326', panoInfo.longitude, panoInfo.latitude, panoInfo.altitude);
        var posPanoCartesian = posPanoWGS84.as('EPSG:4978').xyz();

        _this3.moveCameraToScanPosition(posPanoCartesian);
    });
};

MobileMappingLayer.prototype.moveCameraToScanPosition = function moveCameraToScanPosition(pos) {
    var _this4 = this;

    var speedMove = 0.1;
    var currentPos = (0, _c3DEngine2.default)().camera.camera3D.position.clone();

    var posx = currentPos.x + (pos.x - currentPos.x) * speedMove;
    var posy = currentPos.y + (pos.y - currentPos.y) * speedMove;
    var posz = currentPos.z + (pos.z - currentPos.z) * speedMove;

    (0, _c3DEngine2.default)().camera.camera3D.position.set(posx, posy, posz);
    (0, _c3DEngine2.default)().update();
    var vCurrent = new THREE.Vector3(posx, posy, posz);
    // requestAnimSelectionAlpha(OrientedImages_Provider.smoothTransition(pos,new THREE.Vector3(posx, posy, posz)));

    if (vCurrent.distanceTo(pos) > 0.2) {
        setTimeout(function () {
            _this4.moveCameraToScanPosition(pos, vCurrent);
        }, 20);
    }
};

MobileMappingLayer.prototype.getDefaultOptions = function getDefaultOptions() {
    var o = {
        // HTTP access to itowns sample datasets
        // url : "../{lod}/images/{YYMMDD}/Paris-{YYMMDD}_0740-{cam.cam}-00001_{pano.pano:07}.jpg",
        url: '../{lod}/images/{YYMMDD2}/Paris-{YYMMDD2}_0740-{cam.cam}-00001_{splitIt}.jpg',
        lods: ['itowns-sample-data'], // ['itowns-sample-data-small', 'itowns-sample-data'],
        /*
        // IIP server access
            website   : "your.website.com",
            path    : "your/path",
            url : "http://{website}/cgi-bin/iipsrv.fcgi?FIF=/{path}/{YYMMDD}/Paris-{YYMMDD}_0740-{cam.id}-00001_{pano.id:07}.jp2&WID={lod.w}&QLT={lod.q}&CVT=JPEG",
            lods : [{w:32,q:50},{w:256,q:80},{w:2048,q:80}],
        */
        cam: '../dist/itowns-sample-data/cameraCalibration.json',
        pano: '../dist/itowns-sample-data/panoramicsMetaData.json',
        buildings: '../dist/itowns-sample-data/buildingFootprint.json',
        DTM: '../dist/itowns-sample-data/dtm.json',
        YYMMDD2: function YYMMDD2() {
            // "filename":"Paris-140616_0740-00-00001_0000500"
            // console.log(this);
            return this.pano.filename.match('-(.*?)_')[1];
        },
        splitIt: function splitIt() {
            return this.pano.filename.split('_')[2];
        },
        YYMMDD: function YYMMDD() {
            var d = new Date(this.pano.date);
            return ('' + d.getUTCFullYear()).slice(-2) + ('0' + (d.getUTCMonth() + 1)).slice(-2) + ('0' + d.getUTCDate()).slice(-2);
        },

        UTCOffset: 15,
        seconds: function seconds() {
            var d = new Date(this.pano.date);
            return (d.getUTCHours() * 60 + d.getUTCMinutes()) * 60 + d.getUTCSeconds() - this.UTCOffset;
        },

        visible: true
    };

    return o;
};

exports.default = MobileMappingLayer;